//15 : 2
#include <iostream>

//179
//170
//169

//x допустим, k - первый делитель, k < x
// k > sqrt(x)
// Если k > sqrt(x), тогда (x/k > k) -> k < sqrt(x)
// Следует проверять только до корня из числа

/*возвращаеме значение*/ size_t /*название*/ roots(/*принимаемые параметры*/size_t N)
{
    //169 -> 13
    //170 -> 14
    // проверять вцикле, квадрат числа i меньше нашего N
    //от 2 -> возводим в квадрат (4) -> провеяем 4 < N. Если меьше, то повторяем с тройкой
    size_t i = 0;
    for (i = 2; i * i < N; ++i) {}

    //return - вернуть обратно
    return i; //вещь, которая возвращает обратно некоторое значение из функции. Это значением нам и интересно!
}

int main()
{
    //read number
    
    size_t N = 0;
    std::cin >> N;
    
    //while - опасный
    //for - аналог, который удобно проверяе границы
    //циклом от 2 до нашего числа N

    //зафиксировать i, которое вернулось из функции -> sqrt_N = i
    size_t sqrt_N = roots(N); 

    for (/*инициализация*/ size_t i = 2; /*граница справа*/ i <= sqrt_N; /*шаг*/ i = i + 1)
    {
        //! i - некоторое число проверяемое
        if (N % i == 0) // 5 / 2 - округляется вниз ВСЕГДА
        {
            std::cout << i;
            return 0;
        }
        //сам for добавляет i = i + 1 и повторяет цикл
    }

    //случай, который мы не рассмотрели
    // -> проверять границы
    std::cout << N;
}